// Copyright 2019 Gemalto. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources/subtasks.json
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesSubtasksJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x4b\x6e\x1b\x47\x10\xdd\x0b\xd0\x1d\x1e\xb8\x30\x28\x48\x11\x17\xc9\x4a\x9b\x40\x11\x21\x99\x81\x3e\x0c\x87\x72\x16\x41\x16\xc5\xee\xe2\xb0\xc1\x9e\xae\x41\x7f\x86\x62\x82\x1c\xcb\x17\xf0\xc9\x82\x9e\x21\xad\xcc\x58\xf6\x05\xe2\xd5\x90\x5d\xdd\xf5\x79\xf5\x5e\xd5\xdf\xa7\x27\x00\x30\x5a\x33\xc5\xe4\x79\x84\x2b\xfc\xd1\x1d\xb5\xc7\x53\x6e\x10\x29\x6c\x03\xc6\xa1\x66\x65\xd6\x46\x21\x0a\x9e\x8b\x33\x18\xa7\x6c\xd2\xc6\x95\x78\x5e\xe2\x1c\x4a\x34\x43\x49\x55\xb1\x8b\x61\x74\xf1\x1f\x1f\xb3\x6c\x9e\x93\x8a\x18\x93\xd6\x78\x2e\xa0\xa4\x61\x4f\x25\xc3\x38\x44\x0e\x31\x9c\xf5\x1e\x14\xe2\xc8\xe3\x1c\xbf\x92\x12\x25\x50\x1b\x56\xdb\x49\xaa\x35\x45\xc6\xf8\x51\x60\x42\x48\x8c\x95\x15\xb5\x65\x3f\x51\xde\x44\xa3\xc8\x5e\xbc\xba\x5d\x8b\xb5\xb2\x0b\x68\xc8\x1a\x4d\xd1\x88\x43\x88\x9e\x22\x97\x7b\x7c\x78\x3d\x7b\xe0\xb8\x11\x1d\xf0\x0e\x73\xb1\x46\x19\x1e\xe4\x71\x2b\x3e\x9a\xf5\xbe\x4b\xa0\x67\xb9\x37\x2b\x4f\x7e\x0f\xcf\xb5\xf8\x08\x71\x20\x6b\xf1\xe9\x63\xd1\x2f\xdc\x45\x2e\x7d\x17\xcb\x38\xd4\xa6\x66\x6b\x1c\x63\xfc\xe9\x63\xd1\x8f\x34\xab\x6a\xcb\x19\x39\xdc\xdd\x2d\x0b\x6c\x79\xbf\x13\xaf\xfb\x30\xfe\xee\x4d\xe4\xce\xae\x3d\xad\x63\x8b\x1c\xc6\x87\xbb\xed\x3f\xe3\xca\xb3\x6f\x65\x20\x91\x7e\x50\x56\x92\x9e\xb4\x6e\xae\x70\x00\xb5\x21\x9b\x38\x5c\xee\xa9\xb2\xe0\xa8\x60\xd6\x70\xcc\x9a\x75\xee\x6b\x2e\xbe\x0b\x6b\x02\x6a\x0a\x81\xf5\xe5\x97\x89\x4d\x9e\x3b\x57\x53\x51\x29\x17\xd2\xc6\x9c\x14\x8b\x3e\x22\x87\x4b\xc5\x8e\xca\x92\x7d\xbe\xdc\x33\xdf\xb4\xb1\x6e\x3b\x2a\xc2\x4a\x19\xde\x30\x57\x1c\xbd\x51\xb9\x6b\x9a\xc2\x66\x25\x34\x04\xea\x5e\x14\x59\xac\xd8\xa9\x0d\xc6\x8f\xbc\x3b\x3a\x0c\x38\xc7\xa3\x38\x2c\x78\x80\xd2\x82\x83\xb1\x86\x9d\xe2\x51\x77\xfa\xe7\xc1\x3a\x5a\xa5\x72\xf4\x15\x41\x0c\x28\x7e\x9e\x09\xfe\x16\x8b\xdf\x20\xf1\x57\x5b\x74\x64\xc8\x90\x1b\x59\x3b\x6d\x07\x52\x60\x28\x0a\xfc\xf3\x30\xd1\x50\x7b\xe3\xe2\x20\xd7\x1b\xc9\xb4\xca\x78\xb7\x56\xdc\xb6\xb2\x40\xaa\x27\x28\xde\xcf\x6e\x97\xbd\x30\x3f\x7a\x8d\x9a\x7c\xdc\x43\x73\xcd\x4e\xb3\xcb\x82\xc0\xb8\xa2\x86\xdd\xd9\x1b\x7d\x78\x2a\x0a\xdc\x1b\x95\x61\xeb\x83\x71\x6d\x2d\x56\xc9\x58\x8d\xc5\x0d\xc8\xf3\x81\x34\x18\xaf\xbd\x54\x58\x32\x55\xf8\x45\x92\xcb\xf4\xba\x11\x17\xf9\x25\x9e\x0d\xcb\xa9\xcd\xa0\x94\x47\x7e\x49\x01\xb3\xdf\x50\x44\x8a\x29\xe0\x0a\x8f\x82\x9b\xcf\xca\x77\x82\xf7\xa6\xdc\x5c\x62\x8c\x55\x56\x45\xc6\x08\x1d\x26\xf8\xe9\x22\x53\x9f\xdc\xbe\x3b\xb5\x99\x80\x79\xee\x6c\x18\xf3\x59\x1e\x66\x2b\x46\xc8\x7c\x8b\x1b\x8a\xad\x8e\x35\x37\x6d\xde\x5a\x1c\x83\x9c\xc6\x8e\xb1\x75\xb2\x6b\x8d\x47\x9c\x32\x38\x29\x97\x95\x75\x95\x7c\x7e\xd4\x47\xe9\xda\x45\xd3\x18\x9f\xfa\xe0\x2c\xdf\xcd\x41\x2a\x5b\x5a\x0f\x39\x0c\xd9\x20\xa8\xc8\x51\xd9\x79\x4b\x81\x3d\x42\x14\x6f\x38\xf4\x95\xf6\x61\xb1\xc0\xa2\x1b\x39\x6b\xf1\xa8\x3d\x37\x46\x52\xc0\x7c\xd6\xbf\xf6\x3a\xe2\x8a\xe3\xd8\xcb\xf7\x1d\xbf\xc4\x5c\xf3\xf8\x7a\x39\x9d\xe2\x1c\x15\x65\x1c\x3c\xb9\xd0\xb0\x0f\x64\x11\xa5\x36\x2a\x7c\xd1\x8d\x10\x93\xde\x0f\x1a\xd2\x4d\x23\x25\x6e\x6d\x53\xa6\x00\xea\xc3\x3c\xd7\xac\x8d\xa2\xc8\x1a\xa1\x26\xd5\xa7\xf2\x93\x2f\xc9\x99\xbf\x3a\x50\xa7\x82\xb0\x21\x9f\x17\xc8\xce\xc4\x4d\xf6\xa5\xd8\x3b\xce\xa3\x8c\xaa\x3e\x6a\x73\x2f\x8d\xd1\x0c\x82\x35\x21\x42\xd6\x79\x8b\x44\x81\xf9\x3c\x37\x73\x3b\xdb\x3c\x21\x29\x2a\xa9\x38\x9b\xdb\x1e\x3f\x0d\xcb\x21\xaf\x36\x43\x7e\x7d\xdf\x73\xdf\xf7\xdc\xff\x69\xcf\xf5\x68\xf8\x2d\x15\x0e\xb4\xd3\x58\x3f\x50\xce\xac\x58\x5c\x8f\x2e\x30\x2a\x1e\x1e\xf2\xe7\x6e\x3a\x5f\xe4\xef\x71\x60\xe7\xdf\xcb\xc9\xfc\xe8\xe7\xf4\xe4\xf4\xe4\x9f\x7f\x03\x00\x00\xff\xff\x43\xb4\xd2\x53\x74\x0a\x00\x00")

func resourcesSubtasksJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSubtasksJson,
		"resources/subtasks.json",
	)
}

func resourcesSubtasksJson() (*asset, error) {
	bytes, err := resourcesSubtasksJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/subtasks.json", size: 2676, mode: os.FileMode(438), modTime: time.Unix(1557739710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/subtasks.json": resourcesSubtasksJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"subtasks.json": &bintree{resourcesSubtasksJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
